import { API } from "@/helpers/axios";
import { isAuthticated } from "@/helpers/isAuthenticated";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import React, { useEffect, useState } from "react";
import { toast } from "react-toastify";
import { ArrowLeftIcon, PencilSquareIcon, TrashIcon } from "@heroicons/react/24/solid";

const Order = () => {
  const [order, setOrder] = useState();
  const [loading, setLoading] = useState(false);
  const [price, setPrice] = useState("");
  const [freightValue, setFreightValue] = useState("");
  const router = useRouter();

  const { id } = router.query;

  const fetchOrder = async () => {
    const BASE_URL = process.env.BASE_URL;
    setLoading(true);

    try {
      const response = await API.get(`${BASE_URL}/order_items/${id}`);
      setOrder(response?.data?.data);
      setPrice(response?.data?.data?.price);
      setFreightValue(response?.data?.data?.freight_value);
      setLoading(false);
    } catch (error) {
      setLoading(false);
      toast.error(error.response?.data?.message);
      router.back();
      console.log(error);
    }
  };

  useEffect(() => {
    !isAuthticated() && router.replace("/");
  }, []);

  useEffect(() => {
    id && fetchOrder();
  }, [id]);

  const logout = () => {
    localStorage.clear("token");
    router.replace("/");
  };

  const editOrder = async (e) => {
    e.preventDefault();

    const BASE_URL = process.env.BASE_URL;
    setLoading(true);

    try {
      await API.patch(`${BASE_URL}/order_items/${id}`, {
        price,
        freight_value: freightValue,
      });
      setLoading(false);
      router.reload(`/order_items/${id}`);
      toast.success("Your order was updated successfully");
    } catch (error) {
      setLoading(false);
      toast.error(error.response?.data?.error);
      console.log(error);
    }
  };

  const deleteOrder = async (e) => {
    e.preventDefault();

    const BASE_URL = process.env.BASE_URL;
    setLoading(true);

    try {
      await API.delete(`${BASE_URL}/order_items/${id}`);
      setLoading(false);
      router.replace(`/orders`);
      toast.success("Your order was deleted successfully");
    } catch (error) {
      setLoading(false);
      toast.error(error.response?.data?.error);
      console.log(error);
    }
  };

  return (
    <>
      <Head>
        <title>Order | Unshelled </title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="flex h-screen items-center justify-center p-10">
        {order ? (
          <div className="card max-w-[34rem] bg-base-100 shadow-xl rounded-none relative m-3">
            <Link href="/orders" className="absolute top-4 left-4 bg-black rounded-full p-3 hover:bg-white group">
              <ArrowLeftIcon className="w-5 text-white group-hover:text-black" />
            </Link>
            <figure>
              <img src="/image.jpg" alt="Shoes" />
            </figure>
            <div className="card-body">
              <h2 className="card-title mb-4">My Item</h2>

              <div className="space-y-3 md:space-y-5">
                <div className="flex flex-col md:flex-row md:justify-between md:items-center space-y-2">
                  <span className="font-semibold">Order ID:</span>
                  <span>{order?.order_id}</span>
                </div>

                <div className="flex flex-col md:flex-row md:justify-between md:items-center space-y-2">
                  <span className="font-semibold">Product ID:</span>
                  <span>{order?.product_id}</span>
                </div>

                <div className="flex flex-col md:flex-row md:justify-between md:items-center space-y-2">
                  <span className="font-semibold">Seller's ID:</span>
                  <span>{order?.seller_id}</span>
                </div>

                <div className="flex flex-col md:flex-row md:justify-between md:items-center space-y-2">
                  <span className="font-semibold">Shipping Date:</span>
                  <span>{order?.shipping_limit_date}</span>
                </div>

                <div className="flex flex-col md:flex-row md:justify-between md:items-center space-y-2">
                  <span className="font-semibold">Freight Value:</span>
                  <span>{order?.freight_value}</span>
                </div>

                <div className="flex flex-col md:flex-row md:justify-between md:items-center space-y-2">
                  <span className="font-semibold">Price:</span>
                  <span>{order?.price}</span>
                </div>
              </div>
              <div className="h-[0.3px] my-3 bg-black w-full" />
              <div className="card-actions flex">
                <label htmlFor="my-modal" className="btn rounded-none bg-green-700 border-none flex-1">
                  <PencilSquareIcon className="h-5 w-5 cursor-pointer mr-3" /> Edit Order
                </label>
                <label htmlFor="my-modal-1" className="btn rounded-none bg-red-600 border-none flex-1">
                  <TrashIcon className="h-5 w-5 cursor-pointer  mr-3" /> Delete Order
                </label>
              </div>
            </div>
          </div>
        ) : (
          <p>Loading...</p>
        )}
      </div>

      {/* MODAL */}

      <input type="checkbox" id="my-modal" className="modal-toggle" />
      <label htmlFor="my-modal" className="modal cursor-pointer">
        <label className="modal-box relative" htmlFor="">
          <h3 className="font-bold text-lg">Edit Order</h3>
          <div>
            <div className="flex flex-col mt-6 space-y-2">
              <label htmlFor="Price"> Price </label>
              <input
                type="text"
                name="price"
                value={price}
                onChange={(e) => setPrice(e.target.value)}
                className="text-black input rounded-none input-bordered focus:outline-offset-0 focus:outline-1 disabled:bg-[#ececec] disabled:text-black"
              />
            </div>

            <div className="flex flex-col mt-6 space-y-2">
              <label htmlFor="Freight Value"> Freight Value: </label>
              <input
                type="text"
                name="freight_value"
                value={freightValue}
                onChange={(e) => setFreightValue(e.target.value)}
                className="text-black input rounded-none input-bordered focus:outline-offset-0 focus:outline-1 disabled:bg-[#ececec] disabled:text-black"
              />
            </div>
          </div>
          <div className="modal-action">
            <label
              htmlFor="my-modal"
              className={`${loading && "loading"} btn rounded-none bg-green-700 border-none flex-1`}
              onClick={editOrder}
            >
              <PencilSquareIcon className="h-5 w-5 cursor-pointer mr-3" /> {loading ? "" : "Update Order"}
            </label>
          </div>
        </label>
      </label>

      {/* DELETE MODAL */}

      <input type="checkbox" id="my-modal-1" className="modal-toggle" />
      <div className="modal">
        <div className="modal-box">
          <h3 className="font-bold text-lg">Are you sure you want to delete this order?</h3>

          <div className="modal-action flex items-center">
            <button className="btn rounded-none bg-green-700 border-none flex-1" onClick={deleteOrder}>
              Yes
            </button>
            <label htmlFor="my-modal-1" className="btn rounded-none bg-black border-none flex-1">
              No
            </label>
          </div>
        </div>
      </div>
    </>
  );
};

export default Order;
